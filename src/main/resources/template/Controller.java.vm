package ${package.Controller};

import io.swagger.annotations.*;
import org.springframework.web.bind.annotation.*;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import com.springtemplate.util.R;
import lombok.AllArgsConstructor;


#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */

@RestController
@AllArgsConstructor
@Api(tags = "$!{table.comment}")
@RequestMapping("/${package.ModuleName}/${entity}" )
public class ${table.controllerName} {

    private final  ${table.serviceName} ${entity}service;

    /**
     * 分页查询
     * @param page 分页对象
     * @param ${entity} $!{table.comment}
     * @return
     */
    @ApiOperation(value = "查询分页对象" , response = R.class)
    @ApiImplicitParams({
		    @ApiImplicitParam(name = "page", value = "分页对象", required = true, paramType = "query", dataType = "Page"),
		    @ApiImplicitParam(name = "${entity}", value = "$!{table.comment}", required = true, paramType = "query", dataType = "$!{table.comment}")
    })
    @GetMapping("/page" )
    public R get${entity}Page(Page page, ${entity} ${entity}) {
        return new R<>(${entity}service.page(page, Wrappers.query(${entity})));
    }

    /**
     * 通过id查询
     * @param ${keyPropertyName} 主键id
     * @return R
     */
    @ApiOperation(value = "通过主键ID查询" , response = R.class)
    @GetMapping("/{${keyPropertyName}}" )
    public R getById(@PathVariable("${keyPropertyName}") Integer ${keyPropertyName}) {
		return new R<>(${entity}service.getById(${keyPropertyName}));
    }

    /**
     * 新增$$!{table.comment}
     * @param ${entity} $!{table.comment}
     * @return R
     */
    @ApiOperation(value = "新增${entity}" , response = R.class)
    @PostMapping
    public R save(@RequestBody ${entity} _${entity}){
		return new R<>(${entity}service.save(_${entity}));
		}

    /**
     * 修改$!{table.comment}
     * @param ${entity} $!{table.comment}
     * @return R
     */
    @ApiOperation(value = "修改$!{table.comment}" , response = R.class)
    @PutMapping
    public R updateById(@RequestBody ${entity} _${entity}) {
		return new R<>(${entity}service.updateById(_${entity}));
		}

    /**
     * 通过${keyPropertyName}删除$!{table.comment}
     * @param ${keyPropertyName} 主键
     * @return R
     */
    @ApiOperation(value = "删除$!{table.comment}" , response = R.class)
    @DeleteMapping("/{${keyPropertyName}}" )
    public R removeById(@PathVariable("${keyPropertyName}") Integer _${keyPropertyName}) {
		return new R<>(${entity}service.removeById(_${keyPropertyName}));
		}
}
